
package TrcCommonLib.trclib;

/**
 * This interface specifies a collection of methods to implement an asynchronous trigger. For example, a trigger can
 * be generated by a digital sensor, an analog sensor or any value source. For a digital sensor, a trigger is
 * generated when it changes from an inactive state to an active state or vise versa. For an analog sensor, a trigger
 * is generated when the sensor value crosses a given set of thresholds. This class is intended to be implemented by
 * different sensor trigger classes.
 */
public interface TrcTrigger
{
    /**
     * This method arms the trigger. It enables the task that monitors the sensor value.
     *
     * @param event specifies the event to signal when the trigger state changed.
     */
    void enableTrigger(TrcEvent event);

    /**
     * This method arms the trigger. It enables the task that monitors the sensor value.
     *
     * @param callback specifies the callback handler to notify when the trigger state changed.
     */
    void enableTrigger(TrcEvent.Callback callback);

    /**
     * This method disarms the trigger. It disables the task that monitors the sensor value.
     */
    void disableTrigger();

    /**
     * This method checks if the trigger task is enabled.
     *
     * @return true if enabled, false otherwise.
     */
    boolean isEnabled();

    /**
     * This method reads the current analog sensor value. For digital sensor trigger, it will throw a RuntimeException.
     *
     * @return current sensor value.
     */
    double getSensorValue();

    /**
     * This method reads the current digital sensor state. For analog sensor trigger, it will throw a RuntimeException.
     *
     * @return current sensor state.
     */
    boolean getSensorState();

}   //interface TrcTrigger
